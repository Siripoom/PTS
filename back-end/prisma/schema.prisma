generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @unique @default(uuid())
  fullName         String
  email            String    @unique
  password         String
  role             Role      @default(USER)
  citizen_id       String    @unique @db.VarChar(13)
  phone            String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  bookingsAssigned Booking[] @relation("BookingAssignedBy")
  bookingsAsDriver Booking[] @relation("BookingDriver")
  bookingsAsUser   Booking[] @relation("BookingUser")
}

model Booking {
  id          String   @id @unique @default(uuid())
  userId      String   @map("user_id")
  driverId    String?  @map("driver_id")
  assignedBy  String?  @map("assigned_by")
  pickupDate  DateTime
  pickupTime  DateTime
  pickupLat   Float
  pickupLng   Float
  patientId   String?  @map("patient_id")
  distance    Float
  isCancelled Boolean  @default(false)
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  AssignedBy  User?    @relation("BookingAssignedBy", fields: [assignedBy], references: [id])
  Driver      User?    @relation("BookingDriver", fields: [driverId], references: [id])
  User        User     @relation("BookingUser", fields: [userId], references: [id], onDelete: Cascade)
  patients    Patient[]

  @@map("bookings")
}

model Patient {
  id String @id @unique @default(uuid())
  name String
  idCard String
  bookingId String @map("booking_id")
  booking Booking @relation(fields: [bookingId], references: [id])
}

enum Role {
  ADMIN
  HOST
  STAFF
  USER
}

enum Status {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

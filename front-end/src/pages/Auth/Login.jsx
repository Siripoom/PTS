import { useState } from "react";
import { Input, Button, Card, message } from "antd";
import { UserOutlined, LockOutlined, IdcardOutlined } from "@ant-design/icons";
import { useNavigate, Link } from "react-router-dom";
import logo from "../../assets/ambulance 1.png";
import Navbar from "../../components/Navbar/Navbar";
import { loginUser } from "../../services/api";
import { jwtDecode } from "jwt-decode";

export default function Login() {
  const [login, setLogin] = useState(""); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å email ‡πÄ‡∏õ‡πá‡∏ô login
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleLogin = async () => {
    if (!login || !password) {
      message.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•/‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      return;
    }

    setLoading(true);
    try {
      const data = { login, password }; // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login ‡πÅ‡∏ó‡∏ô email
      const res = await loginUser(data);

      if (res && res.token) {
        localStorage.setItem("token", res.token);
        message.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        const token = localStorage.getItem("token");
        if (token) {
          try {
            const decodedToken = jwtDecode(token);

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° role
            if (
              decodedToken.role === "ADMIN" ||
              decodedToken.role === "STAFF" ||
              decodedToken.role === "PUBLIC_HEALTH_OFFICER" ||
              decodedToken.role === "EXECUTIVE"
            ) {
              navigate("/admin/dashboard");
            } else {
              navigate("/");
            }
            console.log(decodedToken);
          } catch (error) {
            console.error("Error decoding token:", error);
          }
        }
      } else {
        message.error("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      }
    } catch (err) {
      console.error("Login error:", err);
      message.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Navbar />
      <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-blue-50 to-blue-100">
        <Card className="p-10 rounded-3xl shadow-xl w-[400px] bg-white border border-gray-200">
          <div className="text-center">
            <img src={logo} alt="logo" className="w-16 h-16 mx-auto mb-2" />
            <h2 className="text-2xl font-bold text-gray-700">
              üöë ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢
            </h2>
            <p className="text-gray-500 text-sm">
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
            </p>
          </div>
          <div className="mt-8 space-y-5">
            <Input
              size="large"
              placeholder="‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
              prefix={<IdcardOutlined className="text-gray-400" />}
              value={login}
              onChange={(e) => setLogin(e.target.value)}
              className="rounded-lg"
              name="login"
            />
            <Input.Password
              size="large"
              placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              prefix={<LockOutlined className="text-gray-400" />}
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="rounded-lg"
              name="password"
              onPressEnter={handleLogin}
            />
            <Button
              type="primary"
              size="large"
              block
              className="bg-blue-600 hover:bg-blue-700 transition-all duration-300 rounded-lg font-medium"
              onClick={handleLogin}
              loading={loading}
            >
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
            <p className="text-center text-gray-500 text-sm mt-4">
              ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ?{" "}
              <Link
                to="/auth/register"
                className="text-blue-600 hover:underline"
              >
                ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
              </Link>
            </p>
          </div>
        </Card>
      </div>
    </>
  );
}
